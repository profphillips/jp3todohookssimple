{"version":3,"sources":["hooks/useToggleState.js","hooks/useInputState.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","hooks/useTodoState.js","TodoApp.js","index.js"],"names":["useToggle","initialVal","useState","state","setState","toggle","useInputState","value","setValue","e","target","EditTodoForm","id","task","editTodo","toggleEditForm","handleChange","reset","onSubmit","preventDefault","style","marginLeft","width","type","margin","onChange","autoFocus","color","Todo","completed","removeTodo","toggleTodo","useToggleState","isEditing","tabIndex","checked","className","textDecoration","aria-label","onClick","TodoList","todos","length","map","todo","i","background","key","TodoForm","addTodo","placeholder","label","useTodoState","initialTodos","setTodos","newTodoText","uuid","todoId","updatedTodos","filter","newTask","TodoApp","JSON","parse","window","localStorage","getItem","useEffect","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3ccfa23.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n// Called from Todo.js\r\n\r\nfunction useToggle(initialVal = false) {\r\n  // call useState, \"reserve piece of state\"\r\n  const [state, setState] = useState(initialVal);\r\n  const toggle = () => {\r\n    setState(!state);\r\n  };\r\n  // return piece of state AND a function to toggle it\r\n  return [state, toggle];\r\n}\r\nexport default useToggle;\r\n","import { useState } from \"react\";\r\n// Called from TodoForm.js and EditTodoForm.js\r\n\r\n// export default (initialVal) => { // this line no longer seems to work\r\n// const useInputState = (initialVal) => { // this line does work\r\n\r\n// This maintains the temporary state of a text field. The functions\r\n// update the state when a value changes and can reset the state to empty.\r\nfunction useInputState(initialVal) {\r\n  const [value, setValue] = useState(initialVal);\r\n\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const reset = () => {\r\n    setValue(\"\");\r\n  };\r\n\r\n  return [value, handleChange, reset];\r\n}\r\n\r\nexport default useInputState;\r\n","import React from \"react\";\r\nimport useInputState from \"./hooks/useInputState\";\r\n// Called from: Todo.js\r\n\r\n// Allows the user to edit any selected todo task. When the todo\r\n// Edit button is clicked then a text field is toggled on with\r\n// the current task showing. The user makes changes and presses\r\n// Enter to submit the form. The editTodo function is then called\r\n// with the new task value.\r\nfunction EditTodoForm({ id, task, editTodo, toggleEditForm }) {\r\n  const [value, handleChange, reset] = useInputState(task);\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        editTodo(id, value);\r\n        reset();\r\n        toggleEditForm();\r\n      }}\r\n      style={{ marginLeft: \"1rem\", width: \"50%\" }}\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        margin=\"normal\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        autoFocus\r\n        style={{ color: \"blue\", width: \"80%\" }}\r\n      />\r\n    </form>\r\n  );\r\n}\r\nexport default EditTodoForm;\r\n","import React from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\nimport EditTodoForm from \"./EditTodoForm\";\r\n// Called from: TodoList.js\r\n\r\n// This represents a single todo line containing a checkbox, the todo task,\r\n// and 2 buttons to delete or edit the task.\r\nfunction Todo({ id, task, completed, removeTodo, toggleTodo, editTodo }) {\r\n  const [isEditing, toggle] = useToggleState(false);\r\n  return (\r\n    <div>\r\n      {isEditing ? (\r\n        <EditTodoForm\r\n          editTodo={editTodo}\r\n          id={id}\r\n          task={task}\r\n          toggleEditForm={toggle}\r\n        />\r\n      ) : (\r\n        // span for the entire task line to wrap elements and later add style\r\n        <span>\r\n          <input\r\n            type=\"checkbox\"\r\n            tabIndex={-1}\r\n            checked={completed}\r\n            // onClick={() => toggleTodo(id)} // replaced by onChange\r\n            onChange={() => toggleTodo(id)}\r\n          />\r\n          <span\r\n            className=\"TodoTask\"\r\n            style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\r\n          >\r\n            {task}\r\n          </span>\r\n          <span className=\"TodoButtonGroup\">\r\n            <button\r\n              className=\"TodoButton\"\r\n              aria-label=\"Delete\"\r\n              onClick={() => removeTodo(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n            <button className=\"TodoButton\" aria-label=\"Edit\" onClick={toggle}>\r\n              Edit\r\n            </button>\r\n          </span>\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n// Called from TodoApp.js\r\n\r\n// Displays an unordered list of todo rows\r\nfunction TodoList({ todos, removeTodo, toggleTodo, editTodo }) {\r\n  if (todos.length)\r\n    // check that we have more than zero todos\r\n    return (\r\n      <div className=\"TodoList\">\r\n        <ul>\r\n          {todos.map((todo, i) => (\r\n            // <li key={i} style={{ background: i % 2 ? \"#e8cebf\" : \"#ddaf94\" }}>\r\n            <li key={i} style={{ background: i % 2 ? \"#cec\" : \"#ded\" }}>\r\n              <Todo\r\n                {...todo}\r\n                key={todo.id}\r\n                removeTodo={removeTodo}\r\n                toggleTodo={toggleTodo}\r\n                editTodo={editTodo}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  return null;\r\n}\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport useInputState from \"./hooks/useInputState\";\r\n// Called from TodoApp.js\r\n\r\nfunction TodoForm({ addTodo }) {\r\n  // useInputState manages the state of our text field\r\n  // and returns with its current value and 2 functions\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n  return (\r\n    // When the enter key is pressed the form is submitted\r\n    // and the value is passed to the addTodo function.\r\n    // Then we reset the text field to empty and return.\r\n    <form\r\n      className=\"TodoForm\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        addTodo(value);\r\n        reset();\r\n      }}\r\n    >\r\n      {/* As the user types the handleChange function is called\r\n       and the text field is updated */}\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        placeholder=\"Type new todo and press enter\"\r\n        onChange={handleChange}\r\n        label=\"Add New Todo\"\r\n        autoFocus={true}\r\n      />\r\n    </form>\r\n  );\r\n}\r\nexport default TodoForm;\r\n","import { useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\n// Called from TodoApp.js\r\n\r\n// export default (initialTodos) => { // this no longer works\r\n// const useTodoState = (initialTodos) => { // this does work\r\n\r\n// initialTodos come from TodoApp.js\r\nfunction useTodoState(initialTodos) {\r\n  const [todos, setTodos] = useState(initialTodos);\r\n\r\n  // return an object containing the todos array and the functions to work on it\r\n  return {\r\n    todos,\r\n    addTodo: (newTodoText) => {\r\n      // unwrap the todos array, add a new todo object on the end, and set the updated state\r\n      setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\r\n    },\r\n    removeTodo: (todoId) => {\r\n      // retrieve all of the todos except the ones matching todoId\r\n      const updatedTodos = todos.filter((todo) => todo.id !== todoId);\r\n      setTodos(updatedTodos);\r\n    },\r\n    toggleTodo: (todoId) => {\r\n      // loop through each todo and toggle the completed property if matching todoId\r\n      const updatedTodos = todos.map((todo) =>\r\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n      setTodos(updatedTodos);\r\n    },\r\n    editTodo: (todoId, newTask) => {\r\n      // loop through each todo and update the task property if matching todoId\r\n      const updatedTodos = todos.map((todo) =>\r\n        todo.id === todoId ? { ...todo, task: newTask } : todo\r\n      );\r\n      setTodos(updatedTodos);\r\n    },\r\n  };\r\n}\r\n\r\nexport default useTodoState;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./Style.css\";\r\nimport TodoList from \"./TodoList\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport useTodoState from \"./hooks/useTodoState\";\r\n// Called from: index.js\r\n\r\n// Might rewrite as a function when moving to a database call...\r\n// function initialTodos() {\r\n//   return JSON.parse(window.localStorage.getItem(\"todos\") || \"[]\");\r\n// }\r\n\r\nfunction TodoApp() {\r\n  // Grab any existing todos from the browser local storage. If none exist,\r\n  // then set the initialTodos to be an empty array.\r\n  const initialTodos = JSON.parse(window.localStorage.getItem(\"todos\") || \"[]\");\r\n  // This returns our starting state and 4 functions to manipulate the state.\r\n  const { todos, addTodo, removeTodo, toggleTodo, editTodo } = useTodoState(\r\n    initialTodos\r\n  );\r\n  // Any time the todos change then this hook will automatically be called\r\n  // to update the local storage.\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  return (\r\n    <div className=\"Wrapper\">\r\n      <h1>JP3 TODO HOOKS SIMPLIFIED</h1>\r\n      <h2>Updated, styled, and simplified by JP ... work in progress...</h2>\r\n      {/* Add a new Todo */}\r\n      <TodoForm addTodo={addTodo} />\r\n      {/* Display all of our Todos as a list */}\r\n      <TodoList\r\n        todos={todos}\r\n        removeTodo={removeTodo}\r\n        toggleTodo={toggleTodo}\r\n        editTodo={editTodo}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default TodoApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport TodoApp from \"./TodoApp\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TodoApp />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}